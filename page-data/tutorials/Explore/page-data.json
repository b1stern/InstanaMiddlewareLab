{"componentChunkName":"component---src-pages-tutorials-explore-index-mdx","path":"/tutorials/Explore/","result":{"pageContext":{"frontmatter":{"title":"Explore Instana and the Quote of the Day Application","description":null},"relativePagePath":"/tutorials/Explore/index.mdx","titleType":"page","MdxNode":{"id":"7f787937-b836-56a9-a306-e4f6884da9eb","children":[],"parent":"0bfb421e-b037-5895-aa7a-2c6535c61289","internal":{"content":"---\ntitle: Explore Instana and the Quote of the Day Application\ndescription:\n---\n\n\n<AnchorLinks>\n  <AnchorLink>Explore kubernetes</AnchorLink>\n  <AnchorLink>Explore the Infrasture View</AnchorLink>\n  <AnchorLink>Exploring the Applications</AnchorLink>\n  <AnchorLink>Exploring GRC dashboard</AnchorLink>  \n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n## Explore Kubernetes\n\nOpen the browser tab for the Instana user interface.\n\nOn the left navigation, select \"kubernetes\"\n  ![](images/kubernetes.png)\n\nYou will see a list of kubernetes clusters.   Look for the Cluster with your student name.  If you don't see your student name, you may need to wait a couple of minutes.\n\nIf you don't see your student name after a couple of minutes, we need to troubleshoot the Instana Agent.  From a terminal window, issue the following command:\noc get pods -n instana-agent\n\nCheck to make sure that all pods are running.\n\nIf all pods are running, we need examine the logs of one of the pods.\n\nType:  oc logs **POD_NAME** -c instana-agent\nwhere **POD_NAME** is one of the pods listed in the previous command.\n\nAssuming that your cluster name shows up properly, click on the link for \"student***\".\n\nYou should see a screen similar to the one below where you can see overall utilization of the kubernetes cluster.\n  ![](images/cluster.png)\n\nSelect some of the other tabs to explore the kubernetes monitoring.  We recommend you look at the Events, Nodes, and Pods tabs.  When you select the pods tab, you will see a list of all pods running within the cluster.\n\nIn the upper right corner, add your student name into the search widget.  You'll notice that it will filter the list to the pods related to the Quote of the Day application.\n  ![](images/pods.png)\n\n\n***\n\n## Explore the Infrastructure View\n\nNext, explore the Infrastructure view.  To do this, click on the \"Infrastructure\" icon on the left side.\n  ![](images/yourZone.png)\n\nYou'll notice that there is a square surrounding one of the servers with your student name.  The square is a \"zone\".  If you recall, you specified a zone name when you\nperformed the yaml based install of the Instana Agent.  The box contained within the square represents the OpenShift worker node.  This is a single server OpenShift environment.\nIf this was a more typically environment, you would see more cubes, one for each worker node.  Notice the k8s-bstern2 zone.  This is a cluster with three worker nodes.\n\nIf you are unable to find your zone due to the large number of students, you can type your student name in the filter bar at the top\n  ![](images/student27.png) \n\nOr, you can use the lucene query language in the search bar.\n- Flyover the filter bar and select \"Entity\"\n- A list will popup. Find and select \"Host\"\n- Once you have select \"Host\", another list will popup. Select \"name\"\n- Now, you will see \"entity.host.name:\".  After the \":\", you can do a wildcard search.  For example \"entity.host.name:student*\"\n\nOnce you have found your zone, flyover the tower that represents your worker node.  The taller tower is the worker node.  It is taller because there are more discovered entities \nrunning on that server.\n  ![](images/student6Flyover.png) \n\nYou'll notice that a number of components were automatically discovered and are instrumented for monitoring.\n\nNext, flyover the other tower.  \n  ![](images/student6Flyover2.png) \n\nThis is the ACE and MQ server. You can see the MQ and ACE components along with a discovered JVM, a python app, and more.\n\nIn the bottom right corner there are several icons that allow you to organize the Infrastructure view in different ways.  For example, group the servers by OS architecture.\n  ![](images/organize.png)\n\nWe recommend you explore those at the end of the lab if time permits.\n\nNext, click on the \"Comparison Table\" near the top of the page.\n  ![](images/comparisonTab.png)\n\nThis table shows a sortable and searchable list of the Hosts that make up this environment.  You can quickly find hosts consuming high CPU, high memory, or have poor health.\n\nIn addition, if you select where is says \"Hosts\", there is a dropdown list that allows you to see lists of JVMs, containers, etc.\n  ![](images/tableContent.png)\n\nChange from \"Hosts\" to \"Docker Containers\" in the dropdown list and you'll see a complete list of containers and their utilization and health.\n\nSwitch back to the Map view by clicking on \"Map\" near the upper left corner.\n  ![](images/map.png)\n\nZoom in with the plus sign in the bottom right corner.\n  ![](images/plus.png)\n\nYou'll notice that each tower is actually comprised of multiple pizza boxes.   Each one represents an \"Entity\" such as an MQ Queue Manager or an ACE Integration Node.\n  ![](images/pizza.png)\n\nFlyover the ACE/MQ server again until you see a list of all discovered Entities.  If you only see 1 entity, move your mouse to one of the corners of the tower.\nOnce you see all of the entities, click your mouse.  You'll see a dialog open \n  ![](images/towerWithEntities.png)\n\nUse the scroll bar to scroll down. You'll notice that you see each of the types of Entities that were discovered.  Expand the MQ entity type and you'll see the Queue\nManager that was discovered.\n  ![](images/openDashboard.png)\n\nAt this point, you could either click on the \"Open Dashboard\" button or you can click on the link for the MQ Queue Manager.  In a similar way, you could open the dashboard \nfor any of the Entities that are being monitored.\n\nClick on the \"Open Dashboard\" button and we'll examine the Host Agent dashboard.  After you click on the botton you'll see a screen that looks like this:\n  ![](images/host.png)\n\nYou can see fine grained metric data for the Host operating system. Scroll down and explore the other metrics.\n\nAs you scroll down the page, you'll notice a section on the left side of the screen that contains a list of Entity types that were discovered. This is the same list that you \nsaw earlier on the Infrastructure view.\n  ![](images/drillMQ.png)\nExpand the IBM MQ Queue Manager section and select the link for the **QM1@acemq.tivlab.raleigh.ibm.com**\n\nYou will navigate to the dashboard for the MQ Queue Manager. Scroll down the page and examine the metrics.  There are many tables that contain links that would allow you to\ndrill into the listener, topics, queues, channels, and more.  Let's focus on the Channels.  Scroll down to the table labeled \"Channels\".  You will notice two channels with the\nsame name. One represents loopback and the other represents the server IP Address.   Select the link next to the one the connection name of 10.0.0.3.\n  ![](images/drillChannel.png)\n\nNext, look at the top of the screen.  You'll notice that this is a breadcrumb that allows you to navigate back to where you were earlier in your nativations.   It is also\npossible to use the back button in your browser.\n  ![](images/breadcrumb.png)\n\nIf time permits at the end of the lab, you can explore some of the other \n\n\n### Create Application Perspective\n\nOn the left hand navigation, select \"Applications\". You will see a screen open up that contains a list of all applications that are defined in the environment.  Initially, this\nthis will be small until the students in the class define their applications.  \n  ![](images/addApplication.png)\n\nThe next thing you are going to do is define an application.  You will see an \"Add\" button in the bottom right corner. \n  ![](images/add.png)\n\nClick on the \"Add\" button\n\nA dialog will open with two options.  We'll examine the \"Global Smart Alerts\" in the Administrative section of this lab.  For now, click on the \"New Application Perspective\" button\n  ![](images/newApplication.png)\n\nWhen the dialog opens, click the \"Next\" button\n  ![](images/next.png)\n\nOn the next screen, click the radio button for \"All downstream services\".  This will ensure that all of the downstream calls for the application will be monitored in this \nApplication Perspective.\n\nNext, click the \"Add filter\" button.\n\nYou will see list of filter options.  Select the option labeled \"Zone\"\n  ![](images/zoneFilter.png)\n\nThen, click on the \"value\" field that is next to the \"Zone\".  You should see a list of Zones including your student name.  Select your student name.\n  ![](images/zoneStudent6.png)\n\nNow, click \"Next\" to go to the next screen.\n  ![](images/next.png)\n\nOn the next page, give your Application Perspect of your student name.  For example, student6.  Then, click the \"All Calls\" radio button to monitor all calls.  Then, click the \"Create\" button to create your Application Perspective.\n  ![](images/createApp.png)\n\n### Explore the Application\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Exploring the service library\n\n  Go back to the main browser tab **IBM Cloud Pak for ...**. This time from the \"hamburger\" menu select **Automate infrastructure -> Manage services**.\n\n  In case you access this module for the first time, \"Welcome\" screen may pop-up. If that happens, click the **Service library** link.\n\n\n\n  In the Service Library view you can see all services defined in the Cloud Pak. On the left you can see different service categories (1), on the right list of all services in a selected category (2). On top, there are additional tabs, where you can define the terraform templates for your environment (3). This tab is explored more in VMware lab. Here you will work with the already defined service.\n\n\n\n  Unfold versions of the **IBMCloud-2Node-App** service (1), then click  **three dots** icon on the right in the **(default)** row (2), and select **View** (3).\n\n  This view shows all the details of the service. Click the **Composition** tab to see the provisioning flow.\n\n\n\n  You can see that service flow includes two tasks:\n  - a terraform template **ibmcloud-vpc-thinklab**, and\n  - Ansible inventory task\n\n\n\n  First task provisions a terraform template in IBM Cloud (To see the source code of the template click this [link](https://github.com/dymaczew/cmh-test-github/tree/master/terraform/ibmcloud-vpc-thinklab)) When it completes, the second one registers newly provisioned VMs in Ansible inventory so you can run the configuration tasks against them. Let's add an Ansible task to the flow. Since the service is already published, to modify it you have to first create a new version. Go back to the **Service Library** view.\n\n\n\n  In the row **IBMCloud-2Node-App** click the **3 dots** icon on the right, and select **Add version**.\n\n\n\n  Provide unique version name (1) - for example provide your student id number as a last field. Notice, that the version number must be in a format X.Y.Z.V. Finally, click **Add** (2).\n\n\n  New version of the service is opened in Service editor. Go to the **Composition** tab (1), unfold the available ansible tasks on the left (2) and drag-and-drop **Configure Nginx** task next to the Ansible inventory task in the flow (3). \n\n\n\n  This is a very simple Ansible playbook available [here](https://github.com/dymaczew/rba-ansible-sample/blob/master/nginx.yaml), which was imported into connected Ansible tower and exposed as a Template (All templates  you create in connected Ansible Tower are automatically shown in the Service Editor). For covenience, the source code was also shown below:\n\n  ```yaml\n    ---\n    - name: Install nginx\n      hosts: all\n      gather_facts: False\n      become: true\n\n      vars:\n       - MyMessage: \"Welcome to Think Lab 2176 instance!\"\n\n      tasks:\n      - name: Add epel-release repo\n        yum:\n          name: epel-release\n          state: present\n\n      - name: Install nginx\n        yum:\n          name: nginx\n          state: present\n\n      - name: Insert Index Page\n        template:\n          src: index.html.j2\n          dest: /usr/share/nginx/html/index.html\n\n      - file:\n          path: /usr/share/nginx/html/index.html\n          mode: 0644\n\n      - name: Start NGiNX\n        service:\n          name: nginx\n          state: started\n  ```\n\n  Click the newly added task to edit parameters.\n\n\n\n  There are three parameters available:\n\n  - inventory name\n  - credentials\n  - extra variables (to be passed to Ansible playbook - for simplicity our task does not require any parameters)\n\n  Click **inventory_name** link (1) and then click **Link parameter** (2).\n\n\n\n  Instead of providing the static value, you will link as input the output value from the previous **Ansible inventory** task. Pick **Ansible** (1) and unfold the **Inventory** task parameters (2).\n\n\n\n  Scroll down and select **inventory_name (output)** (1). To create a linkage click the '+' sign next to the parameter name. Then, click **Save** (2).\n\n\n  As a second required parameter **credential_name** provide the static value \"default-ssh-key\" and click **Save**. In our lab setup, each virtual machine is provisioned with SSH key embedded in a template, and Ansible Tower that is used for automating the configuration tasks, has a matching private key stored with this name. Alternatively, you could add **Ansible Credentials** task in the flow to create a credentials dynamically, but we wanted to simplify the flow for the time sake.\n\n\n\n  When both parameters are in place, click the **Save** button on the top. Then, click \"three dots\" icon next to Publish button and select **Test deploy**.\n\n\n  Provisioning dialog opens. Click **Next**.\n\n  Provide the required parameters. For **service name** (1) and **prefix** (2) provide a unique name (for example your user id - this will help you identify your instance among all VMs provisioned by other students). For **Public ssh key** (3) you have to provide a public ssh key to be injected into the Virtual machines. Since all the students are using the jump workstation generated from the same template, to avoid duplicates let's generate a new one. Open the Terminal window (link should be on the Desktop - you may need to minimize the browser to see it) and run the following command (hit ENTER twice when prompted for passphrase):\n\n  ```sh\n  ssh-keygen -t rsa -f student\n  ```\n\n  Sample output should look like below:\n\n  ```sh\n  ssh-keygen -t rsa -f student\n  Generating public/private rsa key pair.\n  Enter passphrase (empty for no passphrase): \n  Enter same passphrase again: \n  Your identification has been saved in student.\n  Your public key has been saved in student.pub.\n  The key fingerprint is:\n  SHA256:ttvYM7oiJjgOFW+wuRhUYU/OGQdMlEilArmV12zsMS8 dymaczew@Wlodeks-MBP\n  The keys randomart image is:\n  +---[RSA 3072]----+\n  |...*B@o.         |\n  |o =.Bo@          |\n  | =oo B +         |\n  |o .*  E .        |\n  |. + o  .S        |\n  | + o   . .       |\n  |o..     .        |\n  |+ . o .  =o      |\n  |.o o . .=ooo     |\n  +----[SHA256]-----+\n  ```\n\n  List the content of **student.pub** file (cat student.pub) and copy the key to the provisioning dialog in the **Public SSH key** field. You can change **Environment** type (4) - that will be dynamically mapped to the filters in the Infrastructure management UI. Finally hit **Deploy** button (5).\n\n\n\n  On the Order confirmation dialog select **Go to instances** to verify the provisioning process.\n\n\n\n***\n\n## Summary\n\n  In this exercise you have modified the service definition to combine provisioning of infrastructure in public cloud using Terraform template with the configuration task leveraging Ansible playbook. You have also explored the capability to define and report configuration compliance policies for virtual machines.\n\n\nTo continue other portions of the lab, select one of the lab exercises in the upper left corner or select one of the images below.\n\n\n<Row>\n\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Installing and Configuring Monitoring\"\n    title=\"Install the Instana Monitoring Agent and Configure the Sensors\"\n    href=\"/tutorials/Install\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](images/multi-cloud.jpg)\n\n</ArticleCard>\n\n</Column>\n\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Diagnose a Problem\"\n    title=\"Learn How Instana Can Help you Quickly Diagnose a Complex Problem\"\n    href=\"/tutorials/Diagnose\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](images/prereqs.jpg)\n\n</ArticleCard>\n</Column>\n\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Administer Instana\"\n    title=\"Learn How to Perform Administrative Tasks in Instana\"\n    href=\"/tutorials/Console_Access\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](images/secure-access.jpg)\n\n</ArticleCard>\n</Column>\n</Row>","type":"Mdx","contentDigest":"0e5c83b21bb9e485a68fcf73629ef87b","owner":"gatsby-plugin-mdx","counter":254},"frontmatter":{"title":"Explore Instana and the Quote of the Day Application","description":null},"exports":{},"rawBody":"---\ntitle: Explore Instana and the Quote of the Day Application\ndescription:\n---\n\n\n<AnchorLinks>\n  <AnchorLink>Explore kubernetes</AnchorLink>\n  <AnchorLink>Explore the Infrasture View</AnchorLink>\n  <AnchorLink>Exploring the Applications</AnchorLink>\n  <AnchorLink>Exploring GRC dashboard</AnchorLink>  \n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n## Explore Kubernetes\n\nOpen the browser tab for the Instana user interface.\n\nOn the left navigation, select \"kubernetes\"\n  ![](images/kubernetes.png)\n\nYou will see a list of kubernetes clusters.   Look for the Cluster with your student name.  If you don't see your student name, you may need to wait a couple of minutes.\n\nIf you don't see your student name after a couple of minutes, we need to troubleshoot the Instana Agent.  From a terminal window, issue the following command:\noc get pods -n instana-agent\n\nCheck to make sure that all pods are running.\n\nIf all pods are running, we need examine the logs of one of the pods.\n\nType:  oc logs **POD_NAME** -c instana-agent\nwhere **POD_NAME** is one of the pods listed in the previous command.\n\nAssuming that your cluster name shows up properly, click on the link for \"student***\".\n\nYou should see a screen similar to the one below where you can see overall utilization of the kubernetes cluster.\n  ![](images/cluster.png)\n\nSelect some of the other tabs to explore the kubernetes monitoring.  We recommend you look at the Events, Nodes, and Pods tabs.  When you select the pods tab, you will see a list of all pods running within the cluster.\n\nIn the upper right corner, add your student name into the search widget.  You'll notice that it will filter the list to the pods related to the Quote of the Day application.\n  ![](images/pods.png)\n\n\n***\n\n## Explore the Infrastructure View\n\nNext, explore the Infrastructure view.  To do this, click on the \"Infrastructure\" icon on the left side.\n  ![](images/yourZone.png)\n\nYou'll notice that there is a square surrounding one of the servers with your student name.  The square is a \"zone\".  If you recall, you specified a zone name when you\nperformed the yaml based install of the Instana Agent.  The box contained within the square represents the OpenShift worker node.  This is a single server OpenShift environment.\nIf this was a more typically environment, you would see more cubes, one for each worker node.  Notice the k8s-bstern2 zone.  This is a cluster with three worker nodes.\n\nIf you are unable to find your zone due to the large number of students, you can type your student name in the filter bar at the top\n  ![](images/student27.png) \n\nOr, you can use the lucene query language in the search bar.\n- Flyover the filter bar and select \"Entity\"\n- A list will popup. Find and select \"Host\"\n- Once you have select \"Host\", another list will popup. Select \"name\"\n- Now, you will see \"entity.host.name:\".  After the \":\", you can do a wildcard search.  For example \"entity.host.name:student*\"\n\nOnce you have found your zone, flyover the tower that represents your worker node.  The taller tower is the worker node.  It is taller because there are more discovered entities \nrunning on that server.\n  ![](images/student6Flyover.png) \n\nYou'll notice that a number of components were automatically discovered and are instrumented for monitoring.\n\nNext, flyover the other tower.  \n  ![](images/student6Flyover2.png) \n\nThis is the ACE and MQ server. You can see the MQ and ACE components along with a discovered JVM, a python app, and more.\n\nIn the bottom right corner there are several icons that allow you to organize the Infrastructure view in different ways.  For example, group the servers by OS architecture.\n  ![](images/organize.png)\n\nWe recommend you explore those at the end of the lab if time permits.\n\nNext, click on the \"Comparison Table\" near the top of the page.\n  ![](images/comparisonTab.png)\n\nThis table shows a sortable and searchable list of the Hosts that make up this environment.  You can quickly find hosts consuming high CPU, high memory, or have poor health.\n\nIn addition, if you select where is says \"Hosts\", there is a dropdown list that allows you to see lists of JVMs, containers, etc.\n  ![](images/tableContent.png)\n\nChange from \"Hosts\" to \"Docker Containers\" in the dropdown list and you'll see a complete list of containers and their utilization and health.\n\nSwitch back to the Map view by clicking on \"Map\" near the upper left corner.\n  ![](images/map.png)\n\nZoom in with the plus sign in the bottom right corner.\n  ![](images/plus.png)\n\nYou'll notice that each tower is actually comprised of multiple pizza boxes.   Each one represents an \"Entity\" such as an MQ Queue Manager or an ACE Integration Node.\n  ![](images/pizza.png)\n\nFlyover the ACE/MQ server again until you see a list of all discovered Entities.  If you only see 1 entity, move your mouse to one of the corners of the tower.\nOnce you see all of the entities, click your mouse.  You'll see a dialog open \n  ![](images/towerWithEntities.png)\n\nUse the scroll bar to scroll down. You'll notice that you see each of the types of Entities that were discovered.  Expand the MQ entity type and you'll see the Queue\nManager that was discovered.\n  ![](images/openDashboard.png)\n\nAt this point, you could either click on the \"Open Dashboard\" button or you can click on the link for the MQ Queue Manager.  In a similar way, you could open the dashboard \nfor any of the Entities that are being monitored.\n\nClick on the \"Open Dashboard\" button and we'll examine the Host Agent dashboard.  After you click on the botton you'll see a screen that looks like this:\n  ![](images/host.png)\n\nYou can see fine grained metric data for the Host operating system. Scroll down and explore the other metrics.\n\nAs you scroll down the page, you'll notice a section on the left side of the screen that contains a list of Entity types that were discovered. This is the same list that you \nsaw earlier on the Infrastructure view.\n  ![](images/drillMQ.png)\nExpand the IBM MQ Queue Manager section and select the link for the **QM1@acemq.tivlab.raleigh.ibm.com**\n\nYou will navigate to the dashboard for the MQ Queue Manager. Scroll down the page and examine the metrics.  There are many tables that contain links that would allow you to\ndrill into the listener, topics, queues, channels, and more.  Let's focus on the Channels.  Scroll down to the table labeled \"Channels\".  You will notice two channels with the\nsame name. One represents loopback and the other represents the server IP Address.   Select the link next to the one the connection name of 10.0.0.3.\n  ![](images/drillChannel.png)\n\nNext, look at the top of the screen.  You'll notice that this is a breadcrumb that allows you to navigate back to where you were earlier in your nativations.   It is also\npossible to use the back button in your browser.\n  ![](images/breadcrumb.png)\n\nIf time permits at the end of the lab, you can explore some of the other \n\n\n### Create Application Perspective\n\nOn the left hand navigation, select \"Applications\". You will see a screen open up that contains a list of all applications that are defined in the environment.  Initially, this\nthis will be small until the students in the class define their applications.  \n  ![](images/addApplication.png)\n\nThe next thing you are going to do is define an application.  You will see an \"Add\" button in the bottom right corner. \n  ![](images/add.png)\n\nClick on the \"Add\" button\n\nA dialog will open with two options.  We'll examine the \"Global Smart Alerts\" in the Administrative section of this lab.  For now, click on the \"New Application Perspective\" button\n  ![](images/newApplication.png)\n\nWhen the dialog opens, click the \"Next\" button\n  ![](images/next.png)\n\nOn the next screen, click the radio button for \"All downstream services\".  This will ensure that all of the downstream calls for the application will be monitored in this \nApplication Perspective.\n\nNext, click the \"Add filter\" button.\n\nYou will see list of filter options.  Select the option labeled \"Zone\"\n  ![](images/zoneFilter.png)\n\nThen, click on the \"value\" field that is next to the \"Zone\".  You should see a list of Zones including your student name.  Select your student name.\n  ![](images/zoneStudent6.png)\n\nNow, click \"Next\" to go to the next screen.\n  ![](images/next.png)\n\nOn the next page, give your Application Perspect of your student name.  For example, student6.  Then, click the \"All Calls\" radio button to monitor all calls.  Then, click the \"Create\" button to create your Application Perspective.\n  ![](images/createApp.png)\n\n### Explore the Application\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Exploring the service library\n\n  Go back to the main browser tab **IBM Cloud Pak for ...**. This time from the \"hamburger\" menu select **Automate infrastructure -> Manage services**.\n\n  In case you access this module for the first time, \"Welcome\" screen may pop-up. If that happens, click the **Service library** link.\n\n\n\n  In the Service Library view you can see all services defined in the Cloud Pak. On the left you can see different service categories (1), on the right list of all services in a selected category (2). On top, there are additional tabs, where you can define the terraform templates for your environment (3). This tab is explored more in VMware lab. Here you will work with the already defined service.\n\n\n\n  Unfold versions of the **IBMCloud-2Node-App** service (1), then click  **three dots** icon on the right in the **(default)** row (2), and select **View** (3).\n\n  This view shows all the details of the service. Click the **Composition** tab to see the provisioning flow.\n\n\n\n  You can see that service flow includes two tasks:\n  - a terraform template **ibmcloud-vpc-thinklab**, and\n  - Ansible inventory task\n\n\n\n  First task provisions a terraform template in IBM Cloud (To see the source code of the template click this [link](https://github.com/dymaczew/cmh-test-github/tree/master/terraform/ibmcloud-vpc-thinklab)) When it completes, the second one registers newly provisioned VMs in Ansible inventory so you can run the configuration tasks against them. Let's add an Ansible task to the flow. Since the service is already published, to modify it you have to first create a new version. Go back to the **Service Library** view.\n\n\n\n  In the row **IBMCloud-2Node-App** click the **3 dots** icon on the right, and select **Add version**.\n\n\n\n  Provide unique version name (1) - for example provide your student id number as a last field. Notice, that the version number must be in a format X.Y.Z.V. Finally, click **Add** (2).\n\n\n  New version of the service is opened in Service editor. Go to the **Composition** tab (1), unfold the available ansible tasks on the left (2) and drag-and-drop **Configure Nginx** task next to the Ansible inventory task in the flow (3). \n\n\n\n  This is a very simple Ansible playbook available [here](https://github.com/dymaczew/rba-ansible-sample/blob/master/nginx.yaml), which was imported into connected Ansible tower and exposed as a Template (All templates  you create in connected Ansible Tower are automatically shown in the Service Editor). For covenience, the source code was also shown below:\n\n  ```yaml\n    ---\n    - name: Install nginx\n      hosts: all\n      gather_facts: False\n      become: true\n\n      vars:\n       - MyMessage: \"Welcome to Think Lab 2176 instance!\"\n\n      tasks:\n      - name: Add epel-release repo\n        yum:\n          name: epel-release\n          state: present\n\n      - name: Install nginx\n        yum:\n          name: nginx\n          state: present\n\n      - name: Insert Index Page\n        template:\n          src: index.html.j2\n          dest: /usr/share/nginx/html/index.html\n\n      - file:\n          path: /usr/share/nginx/html/index.html\n          mode: 0644\n\n      - name: Start NGiNX\n        service:\n          name: nginx\n          state: started\n  ```\n\n  Click the newly added task to edit parameters.\n\n\n\n  There are three parameters available:\n\n  - inventory name\n  - credentials\n  - extra variables (to be passed to Ansible playbook - for simplicity our task does not require any parameters)\n\n  Click **inventory_name** link (1) and then click **Link parameter** (2).\n\n\n\n  Instead of providing the static value, you will link as input the output value from the previous **Ansible inventory** task. Pick **Ansible** (1) and unfold the **Inventory** task parameters (2).\n\n\n\n  Scroll down and select **inventory_name (output)** (1). To create a linkage click the '+' sign next to the parameter name. Then, click **Save** (2).\n\n\n  As a second required parameter **credential_name** provide the static value \"default-ssh-key\" and click **Save**. In our lab setup, each virtual machine is provisioned with SSH key embedded in a template, and Ansible Tower that is used for automating the configuration tasks, has a matching private key stored with this name. Alternatively, you could add **Ansible Credentials** task in the flow to create a credentials dynamically, but we wanted to simplify the flow for the time sake.\n\n\n\n  When both parameters are in place, click the **Save** button on the top. Then, click \"three dots\" icon next to Publish button and select **Test deploy**.\n\n\n  Provisioning dialog opens. Click **Next**.\n\n  Provide the required parameters. For **service name** (1) and **prefix** (2) provide a unique name (for example your user id - this will help you identify your instance among all VMs provisioned by other students). For **Public ssh key** (3) you have to provide a public ssh key to be injected into the Virtual machines. Since all the students are using the jump workstation generated from the same template, to avoid duplicates let's generate a new one. Open the Terminal window (link should be on the Desktop - you may need to minimize the browser to see it) and run the following command (hit ENTER twice when prompted for passphrase):\n\n  ```sh\n  ssh-keygen -t rsa -f student\n  ```\n\n  Sample output should look like below:\n\n  ```sh\n  ssh-keygen -t rsa -f student\n  Generating public/private rsa key pair.\n  Enter passphrase (empty for no passphrase): \n  Enter same passphrase again: \n  Your identification has been saved in student.\n  Your public key has been saved in student.pub.\n  The key fingerprint is:\n  SHA256:ttvYM7oiJjgOFW+wuRhUYU/OGQdMlEilArmV12zsMS8 dymaczew@Wlodeks-MBP\n  The keys randomart image is:\n  +---[RSA 3072]----+\n  |...*B@o.         |\n  |o =.Bo@          |\n  | =oo B +         |\n  |o .*  E .        |\n  |. + o  .S        |\n  | + o   . .       |\n  |o..     .        |\n  |+ . o .  =o      |\n  |.o o . .=ooo     |\n  +----[SHA256]-----+\n  ```\n\n  List the content of **student.pub** file (cat student.pub) and copy the key to the provisioning dialog in the **Public SSH key** field. You can change **Environment** type (4) - that will be dynamically mapped to the filters in the Infrastructure management UI. Finally hit **Deploy** button (5).\n\n\n\n  On the Order confirmation dialog select **Go to instances** to verify the provisioning process.\n\n\n\n***\n\n## Summary\n\n  In this exercise you have modified the service definition to combine provisioning of infrastructure in public cloud using Terraform template with the configuration task leveraging Ansible playbook. You have also explored the capability to define and report configuration compliance policies for virtual machines.\n\n\nTo continue other portions of the lab, select one of the lab exercises in the upper left corner or select one of the images below.\n\n\n<Row>\n\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Installing and Configuring Monitoring\"\n    title=\"Install the Instana Monitoring Agent and Configure the Sensors\"\n    href=\"/tutorials/Install\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](images/multi-cloud.jpg)\n\n</ArticleCard>\n\n</Column>\n\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Diagnose a Problem\"\n    title=\"Learn How Instana Can Help you Quickly Diagnose a Complex Problem\"\n    href=\"/tutorials/Diagnose\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](images/prereqs.jpg)\n\n</ArticleCard>\n</Column>\n\n<Column colLg={4} colMd={4} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Administer Instana\"\n    title=\"Learn How to Perform Administrative Tasks in Instana\"\n    href=\"/tutorials/Console_Access\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](images/secure-access.jpg)\n\n</ArticleCard>\n</Column>\n</Row>","fileAbsolutePath":"/Users/bstern/tivoli/Best_Practices/InstanaMiddlewareLab/InstanaMiddlewareLab/src/pages/tutorials/Explore/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}